plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.4'

	id 'jacoco'
	id 'org.sonarqube' version '4.0.0.2929'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// 로컬 데이터베이스
	runtimeOnly 'com.h2database:h2'
	// 테스트,운영 MySQL 데이터베이스
	runtimeOnly 'com.mysql:mysql-connector-j'

	//테스크컨테이너
	testImplementation "org.testcontainers:mysql:1.19.7"
	testImplementation "org.testcontainers:testcontainers:1.19.7"
	testImplementation "org.testcontainers:junit-jupiter:1.19.7"

	// rest-assured
	testImplementation 'io.rest-assured:rest-assured:5.1.1'
	testImplementation 'com.fasterxml.jackson.core:jackson-databind'

	// 단위테스트-승인테스트
	implementation group: 'com.approvaltests', name: 'approvaltests', version: '23.0.0'

	//swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	//lombok
	implementation 'org.projectlombok:lombok:1.18.22'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()


	jacoco {}
	finalizedBy(tasks.jacocoTestReport)
}


tasks.jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
		csv.required = false

		xml.destination(file("build/jacoco/jacoco.xml"))
		html.destination(file("build/jacoco/jacoco.html"))
	}

	finalizedBy(tasks.jacocoTestCoverageVerification)
}

tasks.jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = "CLASS"

			limit {
				counter = "LINE"
				value = "COVEREDRATIO"
				minimum = BigDecimal.valueOf(BigDecimal.ZERO)
			}

			limit {
				counter = "LINE"
				value = "TOTALCOUNT"
				maximum = BigDecimal.valueOf(100)
			}

			excludes = List.of(
					"*.controller.*",
					"*.api.*",
					"*.infrastructure.*",
					"com.example.tddecommerce.TddEcommerceApplication"
			)
		}
	}
}

sonar {
	properties {
		property("sonar.host.url", "http://localhost:9000")
		property("sonar.login", "sqp_0f3ac7b7184e54f344b1f342a1b584ac5717ace2")
		property("sonar.sources", "src/main/java")
		property("sonar.tests", "src/test/java")
		property("sonar.sourceEncoding", "UTF-8")
		property("sonar.projectKey", "sbserver")
		property("sonar.projectName", "sbserver")
		property("sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/jacoco.xml")
	}
}

compileJava.dependsOn('clean')
